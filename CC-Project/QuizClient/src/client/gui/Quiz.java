package client.gui;

import client.Connection;
import client.GameThread;
import client.Question;
import client.Song;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.UIManager;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import middleware.PDU;
import middleware.SO;

/**
 * Nesta frame é onde acontece o jogo. Componente principal da aplicação.
 *
 * @author jdc
 * @version 2015.04.04
 */
public class Quiz extends javax.swing.JInternalFrame {

    // Variáveis de classe
    private static int ONE_MIN_IN_MILLI = 60000;
    private static int CORRECT_ANSW_POINTS = 2;
    private static int WRONG_ANSW_POINTS = -1;
    private static Color DEFAULT = UIManager.getColor("Panel.background");

    private String challenge;
    private Connection connection;
    private GameThread gt;

    private int currentQuestion;
    private int score;
    private float responseTime;

    private boolean alreadyAnswer = false;

    private Song currentSong;

    // Relógio para a barra de progresso da música
    private Timer progressBarTimer;

    private long inicio;
    private long atual;
    private int remainderTime;
    private int elapsedTime;

    public Quiz() {
        initComponents();

        this.background.setIcon(new ImageIcon(SO.getFancyBackground()));
        currentQuestion = 0;
        score = 0;
        responseTime = 0;
    }

    public String getChallengeName() { return this.challenge; }
    
    public void setGameThread(GameThread gm) {
        gt = gm;
    }

    public void setConnection(Connection connection) {
        this.connection = connection;
    }

    public void setChallenge(String challenge) {
        this.challenge = challenge;
        this.setTitle(challenge);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        coverLabel = new javax.swing.JLabel();
        optionBButton = new javax.swing.JButton();
        optionAButton = new javax.swing.JButton();
        optionCButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        questionLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        numquestLabel = new javax.swing.JLabel();
        ignoreButton = new javax.swing.JButton();
        timeLabel = new javax.swing.JLabel();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("NOME DO DESAFIO");
        setPreferredSize(new java.awt.Dimension(870, 515));
        getContentPane().setLayout(null);

        coverLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                coverLabelMouseClicked(evt);
            }
        });
        getContentPane().add(coverLabel);
        coverLabel.setBounds(184, 39, 524, 331);

        optionBButton.setText("Opção B");
        optionBButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionBButtonActionPerformed(evt);
            }
        });
        getContentPane().add(optionBButton);
        optionBButton.setBounds(460, 404, 376, 50);

        optionAButton.setText("Opção A");
        optionAButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionAButtonActionPerformed(evt);
            }
        });
        getContentPane().add(optionAButton);
        optionAButton.setBounds(40, 404, 381, 50);

        optionCButton.setText("Opção C");
        optionCButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionCButtonActionPerformed(evt);
            }
        });
        getContentPane().add(optionCButton);
        optionCButton.setBounds(40, 460, 381, 50);

        exitButton.setText("Saír");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        getContentPane().add(exitButton);
        exitButton.setBounds(750, 520, 90, 30);

        questionLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        questionLabel.setForeground(new java.awt.Color(255, 255, 255));
        questionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        questionLabel.setText("Aqui vai o texto com a pergunta");
        getContentPane().add(questionLabel);
        questionLabel.setBounds(160, 10, 570, 17);

        progressBar.setForeground(new java.awt.Color(255, 0, 51));
        progressBar.setMaximum(1000);
        progressBar.setOpaque(true);
        getContentPane().add(progressBar);
        progressBar.setBounds(184, 383, 510, 20);

        numquestLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        numquestLabel.setForeground(new java.awt.Color(255, 255, 255));
        numquestLabel.setText("Pergunta: X/10");
        getContentPane().add(numquestLabel);
        numquestLabel.setBounds(10, 55, 160, 24);

        ignoreButton.setText("Ignorar");
        ignoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ignoreButtonActionPerformed(evt);
            }
        });
        getContentPane().add(ignoreButton);
        ignoreButton.setBounds(460, 460, 376, 50);

        timeLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        timeLabel.setForeground(new java.awt.Color(255, 255, 255));
        timeLabel.setText("\"runtime\"");
        getContentPane().add(timeLabel);
        timeLabel.setBounds(700, 380, 120, 20);

        background.setPreferredSize(new java.awt.Dimension(1200, 800));
        getContentPane().add(background);
        background.setBounds(0, 0, 890, 560);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void optionAButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionAButtonActionPerformed

        if (this.alreadyAnswer == false) {
            currentSong.stop(); // Parar de tocar a canção
            progressBarTimer.stop(); // Parar a barra de progresso
            this.responseTime += (60 - this.remainderTime); // Incrementar tempo de respostas
            System.out.println("Tempo Resposta: " + this.remainderTime);

            PDU msg = new PDU(this.connection.getLabelCount());
            msg.creatAnswer();
            msg.setDesafio(this.challenge);
            msg.setNumQuestao(this.currentQuestion);
            msg.setEscolha(1);
            msg = this.connection.getSendAndRecive(msg);

            if (msg.getCerta()) {
                this.optionAButton.setBackground(Color.GREEN);
                score += CORRECT_ANSW_POINTS;
            } else {
                this.optionAButton.setBackground(Color.RED);
                score += WRONG_ANSW_POINTS;
                //lightUpCurrentRightAnsw();
            }

            this.alreadyAnswer = true;
        }
    }//GEN-LAST:event_optionAButtonActionPerformed

    private void optionCButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionCButtonActionPerformed
        if (this.alreadyAnswer == false) {
            currentSong.stop(); // Parar de tocar a canção
            progressBarTimer.stop(); // Parar a barra de progresso
            this.responseTime += (60 - this.remainderTime); // Incrementar tempo de respostas
            System.out.println("Tempo Resposta: " + this.remainderTime);

            PDU msg = new PDU(this.connection.getLabelCount());
            msg.creatAnswer();
            msg.setDesafio(this.challenge);
            msg.setNumQuestao(this.currentQuestion);
            msg.setEscolha(3);
            msg = this.connection.getSendAndRecive(msg);

            if (msg.getCerta()) {
                this.optionCButton.setBackground(Color.GREEN);
                score += CORRECT_ANSW_POINTS;
            } else {
                this.optionCButton.setBackground(Color.RED);
                score += WRONG_ANSW_POINTS;
                //lightUpCurrentRightAnsw();
            }

            this.alreadyAnswer = true;
        }
    }//GEN-LAST:event_optionCButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        int option = JOptionPane.showConfirmDialog(null, "Tem a certeza que pretende desistir do jogo?", "Saír", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            try {
                // "Desligar" jogo antes de saír para o perfil
                this.currentSong.stop(); // Parar de tocar a canção
                this.progressBarTimer.stop(); // Para o relógio

                PDU msg = new PDU(this.connection.getLabelCount());
                msg.creatQuit();
                msg.setDesafio(challenge);
                
                System.out.println("Vai pacote para desistir...");
                msg = this.connection.getSendAndRecive(msg);
                System.out.println("Recebi resposta do servidor");
                
                if (msg.getOK()){
                    this.dispose();
                } else {
                    JOptionPane.showMessageDialog(null, msg.getErro(), "Erro", JOptionPane.ERROR_MESSAGE);
                    this.dispose();
                }
            } catch (Exception ex) {
            }
        }
    }//GEN-LAST:event_exitButtonActionPerformed

    private void optionBButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionBButtonActionPerformed
        if (this.alreadyAnswer == false) {
            currentSong.stop(); // Parar de tocar a canção
            progressBarTimer.stop(); // Parar a barra de progresso
            this.responseTime += (60 - this.remainderTime); // Incrementar tempo de respostas

            PDU msg = new PDU(this.connection.getLabelCount());
            msg.creatAnswer();
            msg.setDesafio(this.challenge);
            msg.setNumQuestao(this.currentQuestion);
            msg.setEscolha(2);
            msg = this.connection.getSendAndRecive(msg);

            if (msg.getCerta()) {
                this.optionBButton.setBackground(Color.GREEN);
                score += CORRECT_ANSW_POINTS;
            } else {
                this.optionBButton.setBackground(Color.RED);
                score += WRONG_ANSW_POINTS;
                //lightUpCurrentRightAnsw();
            }

            this.alreadyAnswer = true;
        }
    }//GEN-LAST:event_optionBButtonActionPerformed

    private void coverLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_coverLabelMouseClicked
        if (this.alreadyAnswer == true) {
            this.alreadyAnswer = false;
            try {
                this.updateQuestion();
            } catch (IOException ex) {
                Logger.getLogger(Quiz.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(Quiz.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_coverLabelMouseClicked

    private void ignoreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ignoreButtonActionPerformed
        if (this.alreadyAnswer == false) {
            currentSong.stop(); // Parar de tocar a canção
            progressBarTimer.stop(); // Parar a barra de progresso
            this.responseTime += (60 - this.remainderTime); // Incrementar tempo de respostas

            PDU msg = new PDU(this.connection.getLabelCount());
            msg.creatAnswer();
            msg.setDesafio(this.challenge);
            msg.setNumQuestao(this.currentQuestion);
            msg.setEscolha(0);
            msg = this.connection.getSendAndRecive(msg);

            //ou fazer alguma coisa, ou siplesmente faz updateQuestion
            try {
                this.updateQuestion();
            } catch (IOException ex) {
                Logger.getLogger(Quiz.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(Quiz.class.getName()).log(Level.SEVERE, null, ex);
            }            
        }        
    }//GEN-LAST:event_ignoreButtonActionPerformed

    /**
     * Serve para avançarmos a pergunta se o utilizador não responder durante 1 minuto
     */
    private void tempoDeResponderPassou(){
        if (this.alreadyAnswer == false) {
            currentSong.stop(); // Parar de tocar a canção
            progressBarTimer.stop(); // Parar a barra de progresso
            this.responseTime += (60 - this.remainderTime); // Incrementar tempo de respostas

            PDU msg = new PDU(this.connection.getLabelCount());
            msg.creatAnswer();
            msg.setDesafio(this.challenge);
            msg.setNumQuestao(this.currentQuestion);
            msg.setEscolha(0);
            msg = this.connection.getSendAndRecive(msg);

            //ou fazer alguma coisa, ou siplesmente faz updateQuestion
            try {
                this.updateQuestion();
            } catch (IOException ex) {
                Logger.getLogger(Quiz.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(Quiz.class.getName()).log(Level.SEVERE, null, ex);
            }            
        } 
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Quiz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Quiz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Quiz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Quiz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Quiz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel background;
    private javax.swing.JLabel coverLabel;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton ignoreButton;
    private javax.swing.JLabel numquestLabel;
    private javax.swing.JButton optionAButton;
    private javax.swing.JButton optionBButton;
    private javax.swing.JButton optionCButton;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel questionLabel;
    private javax.swing.JLabel timeLabel;
    // End of variables declaration//GEN-END:variables

    
   /*---------------------------------------------------------------------------------------------*/
   /*---------------------------------- Métodos auxiliares ---------------------------------------*/
   /*---------------------------------------------------------------------------------------------*/

    /**
     * Método que atualizada o quiz colocando nova questão.
     */
    public void updateQuestion() throws IOException, InterruptedException {

        if (this.currentQuestion < 10) {
            Question q = this.gt.getNextQuestion();
            // Tocar nova canção
            String songpath = q.getSong();
            currentSong = new Song(songpath);
            currentSong.play();

            // Reniciar a barra de progresso da canção (01:00 min)
            initProgressBar();

            this.questionLabel.setText(q.getQuestion());
            this.optionAButton.setText(q.getOptionA());
            this.optionBButton.setText(q.getOptionB());
            this.optionCButton.setText(q.getOptionC());

            // Colocar butões nas suas cores normais
            this.optionAButton.setBackground(DEFAULT);
            this.optionBButton.setBackground(DEFAULT);
            this.optionCButton.setBackground(DEFAULT);

            // Colocar a respetiva imagem
            ImageIcon img = new ImageIcon(q.getImage());
            this.coverLabel.setIcon(img);

            // Inicializar labels de score e nº de pergunta
            this.numquestLabel.setText("Pergunta: " + (this.currentQuestion + 1) + "/10");
            //this.scoreLabel.setText("Score: " + this.score);
        } else {

            /*--------------------------------------------------------------------------*/
            /*O DESAFIO TERMINA AQUI*/
            /*--------------------------------------------------------------------------*/
            // Fim do desafio
            this.optionAButton.setBackground(DEFAULT);
            this.optionBButton.setBackground(DEFAULT);
            this.optionCButton.setBackground(DEFAULT);
            this.ignoreButton.setBackground(DEFAULT);
            this.optionAButton.setText("Fim do desafio :)");
            this.optionBButton.setText("Fim do desafio :)");
            this.optionCButton.setText("Fim do desafio :)");
            this.ignoreButton.setText("Fim do desafio :)");

            Profile.desktop.setEnabled(false);
            JOptionPane.showMessageDialog(Profile.desktop, "À espera que os outros jogogadores terminem o desafio ...");
            
            
            //Apresentar algo como "a espera que os outros jogadores acabem os seus sesafios"
            PDU msg = new PDU(this.connection.getLabelCount());
            msg.creatEnd();
            msg.setDesafio(this.challenge);
            msg = this.connection.getSendAndRecive(msg);

            // Listar Pontuação do Desafio
                     
            List<Integer> lista = msg.getListScore();
            List<String> names = msg.getListAlcunha();
            StringBuilder sb = new StringBuilder();
            
            sb.append("RESULTADOS\n");
            
            for(String s: names)
                sb.append(s+"::");
            
            sb.append("\n");
            
            for(Integer s : lista){
                sb.append(s+"::");
            }
            
            JOptionPane.showMessageDialog(Profile.desktop, sb.toString());
            
            
            // Terminar o desafio
            this.dispose();
        }

        this.currentQuestion++;
    }

    /**
     * Método para inicialização da barra de progresso e relógio decrescente da
     * música para cada questão.
     */
    void initProgressBar() {
        inicio = System.currentTimeMillis();
        remainderTime = 60; // O utilizador tem 60 segundos para responder à questão
        elapsedTime = 1; // Permite manter o timer ocorrente do próximo segundo (devido a conversão de mili para segundos)

        // Inicializar label com informação do tempo
        this.timeLabel.setText("01:00");

        progressBarTimer = new Timer(0, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                atual = System.currentTimeMillis();
                long aux = atual - inicio;
                aux = aux * progressBar.getMaximum();
                int newvalue = (int) ((int) aux / ONE_MIN_IN_MILLI);
                progressBar.setValue(newvalue);

                // Atualizar label com tempo
                int secs = (int) ((atual - inicio) * 0.001);
                if (secs == elapsedTime) { // passou um segundo
                    elapsedTime++;
                    remainderTime--;
                    if (remainderTime < 10) {
                        timeLabel.setText("00:0" + remainderTime);
                    } else if (remainderTime > 10 && remainderTime < 60) {
                        timeLabel.setText("00:" + remainderTime);
                    } else if (remainderTime >= 60) {
                        timeLabel.setText("01:00");
                    }
                }
            }
        });

        progressBar.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                if (progressBar.getValue() == progressBar.getMaximum()) {
                    // Caso o utilizador não responda conta como de não tivesse respondido
                    currentSong.stop(); // Parar de tocar a canção
                    progressBarTimer.stop(); // Parar a barra de progresso
                    responseTime += progressBar.getValue(); // Incrementar tempo de respostas
                    alreadyAnswer = true;
                }
            }
        });
        progressBarTimer.start();
    }
}
