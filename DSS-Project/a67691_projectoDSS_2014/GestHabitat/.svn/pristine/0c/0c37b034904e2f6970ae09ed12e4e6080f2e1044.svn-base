package data_acess;

import business.projetos.IMaterial;
import business.projetos.MaterialFactory;
import data_acess.ConnectionErrorException;
import java.sql.*;
import java.util.*;
import data_acess.MySQLManager;
import data_acess.MySQLParseTools;

/**
 * Implementação de um Data Acess Object para gerir instancias da classe Material.
 * @author Jorge Caldas, José Cortez, Marcelo Gonçalves, Ricardo Silva
 * @version 30.12.2014
 */
public class MaterialDAO {
    
    public Connection conn;
    private MySQLParseTools parseTools;


    public MaterialDAO () throws ConnectionErrorException {
        try {
            this.parseTools = new MySQLParseTools();
            this.conn = (new MySQLManager()).getConnection();
        } catch (SQLException ex) {System.out.println("error_material_bd");}
    }
    
    public int size() {
        try {
            int i = 0;
            Statement stm = conn.createStatement();
            ResultSet rs = stm.executeQuery("SELECT nome FROM Material");
            while(rs.next()){ i++; }
            return i;
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}
    }
    
    public boolean isEmpty() {
        try {
            Statement stm = conn.createStatement();
            ResultSet rs = stm.executeQuery("SELECT Nome FROM Material");
            return !rs.next();
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}
    }
    
    public boolean containsKey(Object key) throws NullPointerException {
        try {
            Statement stm = conn.createStatement();
            String sql = "SELECT nome FROM Material WHERE Id='"+(int)key+"'";
            ResultSet rs = stm.executeQuery(sql);
            return rs.next();
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}
    }
    
    public boolean containsValue(Object value) {
        try {
            if(value instanceof IMaterial) {
                IMaterial v = (IMaterial)value;
                Statement stm = conn.createStatement();
               
                int N=this.size();
                for(int key=1; key<N; key++){
                    IMaterial isv = this.get(key);
                    if(isv!=null){
                        if(v.equals(isv)) return true;
                    }
                }
                return false;
            } else return false;
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}
    }
    
    public IMaterial get(Object key) {
        try {
            IMaterial mt = null;
            Statement stm = conn.createStatement();
            String sql = "SELECT * FROM Material WHERE Id='"+(int)key+"'";
            ResultSet rs = stm.executeQuery(sql);
            if (rs.next()){ 
                mt = new MaterialFactory().createMaterial();
                mt.setId(rs.getInt(1));
                mt.setNome(rs.getString(2));
                mt.setDesc(rs.getString(3));
                mt.setQTD(rs.getInt(4));
            }
            return mt;
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}
    }
    
    public IMaterial put(Integer key, IMaterial value) {
        try {
            Statement stm = conn.createStatement();
            stm.executeUpdate("DELETE FROM Material WHERE Id='"+key+"'");
            int i  = stm.executeUpdate(insert(key,value));
            IMaterial mt = new MaterialFactory().createMaterial();
            mt.setId(value.getId());
            mt.setNome(value.getNome());
            mt.setDesc(value.getDesc());
            mt.setQTD(value.getQTD());
            return mt;
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}
    }

    private String insert(Integer key, IMaterial value){
        MySQLParseTools pt = new MySQLParseTools();

        ArrayList<Object> valores = new ArrayList<>();
        valores.add(key);
        valores.add(value.getNome());
        valores.add(value.getDesc());
        valores.add(value.getQTD());
        
        String sql = pt.createInsert("Material", valores);
        return sql;
    }
    
    public IMaterial remove(Object key) {
        try {
            IMaterial mt = this.get(key);
            Statement stm = conn.createStatement();
            stm.executeUpdate("DELETE FROM Material WHERE Id='"+key+"'");
            return mt;
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}
    }
    
    public Collection<IMaterial> values() {
        try {
            Collection<IMaterial> col = new HashSet<>();
            Statement stm = conn.createStatement();
            ResultSet rs = stm.executeQuery("SELECT * FROM Material");
            for (;rs.next();) {
                IMaterial mt = new MaterialFactory().createMaterial();
                mt.setId(rs.getInt(1));
                mt.setNome(rs.getString(2));
                mt.setDesc(rs.getString(3));
                mt.setQTD(rs.getInt(4));
                col.add(mt);
            }
            return col;
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}
    }
    
    public Set<Map.Entry<String,IMaterial>> entrySet() {
        throw new NullPointerException("public Set<Map.Entry<String,Aluno>> entrySet() not implemented!");
    }
    
    public boolean equals(Object o) {
        throw new NullPointerException("public boolean equals(Object o) not implemented!");
    }
    
    public void clear () {
        try {
            Statement stm = conn.createStatement();
            stm.executeUpdate("DELETE FROM Material WHERE Material.Id>=0;");
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}
    }
    
    @Override
    public int hashCode() { return this.conn.hashCode(); }
    
    public static void main(String[] args) throws ConnectionErrorException, Exception {
        MaterialDAO mDAO = new MaterialDAO();
        mDAO.clear();
        
        List<IMaterial> p = new ArrayList<>();
        
        for(int i=0; i<10; i++){
            IMaterial mt = new MaterialFactory().createMaterial();
            mt.setId(i);
            mt.setQTD(i*100);
            mt.setNome("Vigas");
            mt.setDesc("Vigas de madeira, para fazer alicerces");
            p.add(mt);
        }
        
        System.out.println(mDAO.isEmpty());

        for(IMaterial v : p){
            mDAO.put(v.getId(), (IMaterial)v);
            System.out.println("+1 INSERT succeed.");
        }
        
        System.out.println(mDAO.containsKey(4));
        mDAO.remove(p.get(4).getId());
        System.out.println(mDAO.containsKey(4));
        System.out.println(mDAO.size());

        for(int i=0; i<mDAO.size(); i++){
            if(i!=4) System.out.println("- "+ i +": "+ mDAO.get(i).getId() + mDAO.get(i).getNome());
        }   
        mDAO.clear();
        System.out.println(mDAO.size());
    }
}
