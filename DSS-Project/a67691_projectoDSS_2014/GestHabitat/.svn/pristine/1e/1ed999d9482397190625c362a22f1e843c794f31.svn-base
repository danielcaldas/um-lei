package data_acess;

import business.projetos.ITarefa;
import business.projetos.TarefaFactory;
import data_acess.ConnectionErrorException;
import java.sql.*;
import java.util.*;
import data_acess.MySQLManager;
import data_acess.MySQLParseTools;

/**
 * Implementação de um Data Acess Object para gerir instancias da classe Tarefa.
 * @author Jorge Caldas, José Cortez, Marcelo Gonçalves, Ricardo Silva
 * @version 30.12.2014
 */
public class TarefaDAO {
    public Connection conn;
    private MySQLParseTools parseTools;


    public TarefaDAO () throws ConnectionErrorException {
        try {
            this.parseTools = new MySQLParseTools();
            this.conn = (new MySQLManager()).getConnection();
        } catch (SQLException ex) {System.out.println("error_Tarefas_bd");}
    }
    
    public int size() {
        try {
            int i = 0;
            Statement stm = conn.createStatement();
            ResultSet rs = stm.executeQuery("SELECT Id FROM Tarefas");
            while(rs.next()){ i++; }
            return i;
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}
    }
    
    public boolean isEmpty() {
        try {
            Statement stm = conn.createStatement();
            ResultSet rs = stm.executeQuery("SELECT Id FROM Tarefas");
            return !rs.next();
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}
    }
    
    public boolean containsKey(Object key) throws NullPointerException {
        try {
            Statement stm = conn.createStatement();
            String sql = "SELECT Designacao FROM Tarefas WHERE Id='"+(int)key+"'";
            ResultSet rs = stm.executeQuery(sql);
            return rs.next();
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}
    }
    
    public boolean containsValue(Object value) {
        try {
            if(value instanceof ITarefa) {
                ITarefa v = (ITarefa)value;
                ITarefa isv = this.get(v.getId());
                if(isv!=null){
                    if(v.equals(isv)) return true;
                }
                return false;
            } else return false;
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}
    }
    
    /* COMO FAÇO PARA OS LISTS? */
    public ITarefa get(Object key) {
        try {
            ITarefa mt = null;
            Statement stm = conn.createStatement();
            String sql = "SELECT * FROM Tarefas WHERE Id='"+(int)key+"'";
            ResultSet rs = stm.executeQuery(sql);
            if (rs.next()){ 
                mt = new TarefaFactory().createTarefa();
                mt.setId(rs.getInt(1));
                mt.setDesig(rs.getString(2));
                mt.setDesc(rs.getString(3));
                mt.setDataInicioT(parseTools.parseSQLDate(rs.getString(4)));
                mt.setDataFinalT(parseTools.parseSQLDate(rs.getString(5)));
            }
            return mt;
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}
    }
    
    public ITarefa put(Integer key, ITarefa value) {
        try {
            Statement stm = conn.createStatement();
            stm.executeUpdate("DELETE FROM Tarefas WHERE Id='"+key+"'");
            int i  = stm.executeUpdate(insert(key,value));
            ITarefa mt = new TarefaFactory().createTarefa();
            mt.setId(value.getId());
            mt.setDesig(value.getDesig());
            mt.setDesc(value.getDesc());
            mt.setDataInicioT(value.getDataInicioT());
            mt.setDataFinalT(value.getDataFinalT());
            return mt;
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}
    }

    private String insert(Integer key, ITarefa value){
        String dataI = parseTools.parseCalendar(value.getDataInicioT());
        String dataF = parseTools.parseCalendar(value.getDataFinalT());
        
        ArrayList<Object> valores = new ArrayList<>();
        valores.add(key);
        valores.add(value.getDesig());
        valores.add(value.getDesc());
        valores.add(dataI);
        valores.add(dataF);
              
        String sql = this.parseTools.createInsert("Tarefas", valores);
        return sql;
    }
    
    public ITarefa remove(Object key) {
        try {
            ITarefa mt = this.get(key);
            Statement stm = conn.createStatement();
            stm.executeUpdate("DELETE FROM Tarefas WHERE Nr='"+key+"'");
            return mt;
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}
    }
    
    public Collection<ITarefa> values() {
        try {
            Collection<ITarefa> col = new HashSet<>();
            Statement stm = conn.createStatement();
            ResultSet rs = stm.executeQuery("SELECT * FROM Tarefas");
            for (;rs.next();) {
                ITarefa mt = new TarefaFactory().createTarefa();
                mt.setId(rs.getInt(1));
                mt.setDesig(rs.getString(2));
                mt.setDesc(rs.getString(3));
                mt.setDataInicioT(parseTools.parseSQLDate(rs.getString(4)));
                mt.setDataFinalT(parseTools.parseSQLDate(rs.getString(5)));
                
                col.add(mt);
            }
            return col;
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}
    }
    
    public Set<Map.Entry<String,ITarefa>> entrySet() {
        throw new NullPointerException("public Set<Map.Entry<String,Aluno>> entrySet() not implemented!");
    }
    
    public boolean equals(Object o) {
        throw new NullPointerException("public boolean equals(Object o) not implemented!");
    }
    
    public void clear () {
        try {
            Statement stm = conn.createStatement();
            stm.executeUpdate("DELETE FROM Tarefas WHERE Tarefas.Id>=0;");
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}
    }
    
    @Override
    public int hashCode() { return this.conn.hashCode(); }
    
    public static void main(String[] args) throws ConnectionErrorException, Exception {
        TarefaDAO tDAO = new TarefaDAO();
        tDAO.clear();
        
        List<ITarefa> p = new ArrayList<>();
        
        for(int i=0; i<10; i++){
            ITarefa mt = new TarefaFactory().createTarefa();
            mt.setId(i);
            mt.setDataInicioT(new GregorianCalendar(2012,05,i+2));
            mt.setDataFinalT(new GregorianCalendar(2014,05,i+2));
            mt.setDesig("Projectar colunas da casa");
            mt.setDesc("Criar as colunas que irão servir de suporte à casa");
            p.add(mt);
        }   
        
        System.out.println(tDAO.isEmpty());

        for(ITarefa v : p){
            tDAO.put(v.getId(), (ITarefa)v);
            System.out.println("+1 INSERT succeed.");
        }
        
        System.out.println(tDAO.containsKey(4));
        tDAO.remove(p.get(4).getId());
        System.out.println(tDAO.containsKey(4));
        System.out.println(tDAO.size());

        for(int i=0; i<tDAO.size(); i++){
            if(i!=4) System.out.println("- "+ i +": "+ tDAO.get(i).getId() + " " +tDAO.get(i).getDesig());
        }   
        tDAO.clear();
        System.out.println(tDAO.size());
    }

}
