
    package data_acess;

    import business.doacoes.EventoFactory;
    import business.doacoes.IEvento;
    import java.sql.Connection;
    import java.sql.ResultSet;
    import java.sql.SQLException;
    import java.sql.Statement;
    import java.util.Collection;
    import java.util.Map;
    import java.util.Set;
    import java.util.TreeSet;
    import java.util.ArrayList;

/**
 * Implementação de um Data Acess Object para gerir instancias da classe Donativo.
 * @author Jorge Caldas, José Cortez, Marcelo Gonçalves, Ricardo Silva
 * @version 2014.12.29
 */
    public class EventoDAO implements Map<Integer, IEvento> {

        public Connection conn;
        public MySQLParseTools parseTools;

        /**
         * Construtor que fornece conexão à tabela Doadores na base de dados da Habitat
         * @throws ConnectionErrorException 
         */
        public EventoDAO () throws ConnectionErrorException {
            try {
                parseTools = new MySQLParseTools();
                this.conn = (new MySQLManager()).getConnection();
            } catch (SQLException e) {System.out.println ("error_eventos_bd");}
        }

        @Override
        public void clear() {
            try {
                Statement stm = conn.createStatement();
                stm.executeUpdate("DELETE FROM Eventos WHERE Nr>=0;");
            }
            catch (Exception e) {throw new NullPointerException(e.getMessage());}
        }

        @Override
        public boolean containsKey(Object key) {
            try {
                Statement stm = conn.createStatement();
                String sql = "SELECT Nome FROM Eventos WHERE Nr='"+(int)key+"'";
                ResultSet rs = stm.executeQuery(sql);
                return rs.next();
            }
            catch (Exception e) {throw new NullPointerException(e.getMessage());}
        }

        @Override
        public boolean containsValue(Object value) {
            try {
                if(value instanceof IEvento) {

                    IEvento e = (IEvento)value;
                    Statement stm = conn.createStatement();

                    // Percorrer tabela de doadores e verificar se existe doador
                    // exatamente igual
                    int N=this.size();
                    for(int key=1; key<N; key++){
                        IEvento ie = this.get(key);
                        if(ie!=null){
                            if(e.equals(ie)) return true;
                        }
                    }
                    return false;
                } else return false;
            }
            catch (Exception e) {throw new NullPointerException(e.getMessage());}
        }

        @Override
        public Set<Map.Entry<Integer, IEvento>> entrySet() {
            throw new UnsupportedOperationException("Not supported yet."); 
        }


        public IEvento get(Object key) {
            IEvento ev = new EventoFactory().createEvento();

            try {
                Statement stm = conn.createStatement();
                String sql = "SELECT * FROM Eventos WHERE Nr="+(int)key;
                ResultSet rs = stm.executeQuery(sql);
                if (rs.next()){
                    ev = new EventoFactory().createEvento();
                    ev.setNr(rs.getInt("Nr"));
                    ev.setDesignacao(rs.getString("Nome"));
                    ev.setNrPessoas(rs.getInt("NrPessoas"));
                    ev.setDataRealizacao(parseTools.parseSQLDate(rs.getString("DataRealizacao")));
                    ev.setNotas(rs.getString("Notas"));
                    return ev;
                }
            } catch (Exception e) {throw new NullPointerException(e.getMessage());}

            return ev;
        }

        @Override
        public boolean isEmpty() {
            try {
                Statement stm = conn.createStatement();
                ResultSet rs = stm.executeQuery("SELECT Nome FROM Eventos");
                return !rs.next();
            }
            catch (Exception e) {throw new NullPointerException(e.getMessage());}
        }

        @Override
        public Set<Integer> keySet() {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public IEvento put(Integer key, IEvento value) 
        {
            try {            
                Statement stm = conn.createStatement();
                stm.executeUpdate("DELETE FROM Eventos WHERE Nr='"+key+"'");
                int i  = stm.executeUpdate(insert(key,value));
                IEvento e = new EventoFactory().createEvento();
                e.setNr(value.getNr());
                e.setDesignacao(value.getDesignacao());
                e.setDataRealizacao(value.getDataRealizacao());
                e.setNrPessoas(value.getNrPessoas());
                e.setNotas(value.getNotas());
                return e;
            }
            catch (Exception ex) {throw new NullPointerException(ex.getMessage());}
        }
        
        /*Método auxiliar de inserção na base de dados*/
        private String insert(Integer key, IEvento value)
        {       
        //Usando o parse tools
            String dataR = parseTools.parseCalendar(value.getDataRealizacao());
        

            ArrayList<Object> valores = new ArrayList<>();
            valores.add(key);
            valores.add(value.getDesignacao());
            valores.add(value.getNrPessoas());
            valores.add(dataR);
            valores.add(value.getNotas());
            valores.add("NULL");
        
            String sql = parseTools.createInsert("Eventos", valores);
            return sql;
        }
    

        @Override
        public void putAll(Map<? extends Integer, ? extends IEvento> m) {
            throw new UnsupportedOperationException("Not supported yet."); 
        }

        @Override 
        public IEvento remove(Object key) {
            try {
                IEvento ev = this.get(key);
                Statement stm = conn.createStatement();
                String sql = "DELETE FROM Doadores WHERE Id = "+(int)key;
                int i  = stm.executeUpdate(sql);
                return ev;
            }
            catch (Exception e) {throw new NullPointerException(e.getMessage());}
        }

        @Override
        @SuppressWarnings("empty-statement")
        public int size() {
            try {
                int i = 0;
                Statement stm = conn.createStatement();
                ResultSet rs = stm.executeQuery("SELECT Nr FROM Eventos");
                for (;rs.next();i++);
                return i;
            }
            catch (Exception e) {throw new NullPointerException(e.getMessage());}
        }


    
        @Override
        public Collection<IEvento> values() 
        {
            try {
                Set<IEvento> set = new TreeSet<>();
                int n = this.size();
                for(int i=0; i<n; i++){
                    if(this.containsKey(i)){
                        set.add(this.get(i));
                    }
                }
                return set;
            }
            catch (Exception e) {throw new NullPointerException(e.getMessage());}
        }

    }
