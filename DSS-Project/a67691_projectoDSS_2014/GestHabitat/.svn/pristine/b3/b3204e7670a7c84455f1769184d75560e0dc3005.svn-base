package data_acess;
import business.familias.IRepresentante;
import business.familias.RepresentanteFactory;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Collection;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/**
 *
 * @author Jorge Caldas, José Cortez, Marcelo Gonçalves, Ricardo Silva
 */
public class RepresentanteDAO implements Map<Integer,IRepresentante> {

    public Connection conn;
    public MySQLParseTools parseTools;    

    public RepresentanteDAO() throws ConnectionErrorException{
        try {
            this.conn = (new MySQLManager()).getConnection();
            } 
        catch (SQLException ex) {System.out.println("error_IRepresentante_bd");
            }
     
    
    }

    @Override
    @SuppressWarnings("empty-statement")
    public int size() {
        try {
            int i = 0;
            Statement stm = conn.createStatement();
            ResultSet rs = stm.executeQuery("SELECT Nr FROM IRepresentante");
            for (;rs.next();i++);
            return i;
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}
    }

    @Override
    public boolean isEmpty() {
        try {
            Statement stm = conn.createStatement();
            ResultSet rs = stm.executeQuery("SELECT Nr FROM IRepresentante");
            return rs.next();
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}    
    }

    @Override
    public boolean containsKey(Object o) {
         try {
            Statement stm = conn.createStatement();
            String sql = "SELECT Nome FROM IRepresentante WHERE Nr='"+(int)o+"'";
            ResultSet rs = stm.executeQuery(sql);
            return rs.next();
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}
    }


    @Override
    public boolean containsValue(Object o) {
        throw new NullPointerException("public boolean containsValue(Object value) not implemented!");
    }
 
    @Override
    public IRepresentante get(Object o) {
        try {
            IRepresentante cand = null;
            Statement stm = conn.createStatement();
            String sql = "SELECT * FROM IRepresentante WHERE nr='"+(String)o+"'";
            ResultSet rs = stm.executeQuery(sql);
            if (rs.next()){
                cand = new RepresentanteFactory().createRepresentante();
                cand.setNr(rs.getInt(1));
                cand.setNome(rs.getString(2));
                cand.setDataNasc(parseTools.parseSQLDate(rs.getString(3)));
                cand.setEstadoCivil(rs.getString(4));
                cand.setProfissao(rs.getString(5));
                cand.setLocalidade(rs.getString(6));
                cand.setRua(rs.getString(7));
                cand.setCodPostal(rs.getString(8));
                cand.setNaturalidade(rs.getString(9));
                cand.setNacionalidade(rs.getString(10));
                cand.setEscolaridade(rs.getString(11));
                cand.setTelefone(rs.getString(12));
                cand.setTelemovel(rs.getString(13));
                cand.setRendimentoAgregado(rs.getFloat(14));
                return cand;
        }
        } catch (Exception e) {throw new NullPointerException(e.getMessage());}
    }
    

    @Override
    public IRepresentante put(Integer k, IRepresentante v) {
        try {
            Statement stm = conn.createStatement();
            stm.executeUpdate("DELETE FROM IRepresentante WHERE numero='"+k+"'");
            String sql = "INSERT INTO IRepresentante VALUES ('"+v.getNr()+"','"+k+"',";
            int i  = stm.executeUpdate(sql);
            IRepresentante c = new RepresentanteFactory().createRepresentante();
            c.setNr(c.getNr());
            c.setNome(c.getNome());
            c.setDataNasc(c.getDataNasc());
            c.setEstadoCivil(c.getEstadoCivil());
            c.setProfissao(c.getProfissao());
            c.setLocalidade(c.getLocalidade());
            c.setRua(c.getRua());
            c.setCodPostal(c.getCodPostal());
            c.setNaturalidade(c.getNaturalidade());
            c.setNacionalidade(c.getNacionalidade());
            c.setEscolaridade(c.getEscolaridade());
            c.setTelefone(c.getTelefone());
            c.setTelemovel(c.getTelemovel());
            c.setRendimentoAgregado(c.getRendimentoAgregado());
            return c;
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}
    }


    @Override
    public IRepresentante remove(Object o) {
       try {
            IRepresentante al = this.get(o);
            Statement stm = conn.createStatement();
            String sql = "DELETE '"+o+"' FROM IRepresentante";
            int i  = stm.executeUpdate(sql);
            return al;
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}
    }


    @Override
    public void putAll(Map<? extends Integer, ? extends IRepresentante> map) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
     public void clear () {
        try {
            Statement stm = conn.createStatement();
            stm.executeUpdate("DELETE FROM Representante WHERE Representante.Nr>=0;");
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}
    }
    
    @Override
    public int hashCode() { return this.conn.hashCode(); }

    @Override
    public Set<Integer> keySet() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Collection<IRepresentante> values() {
       try {
            Collection<IRepresentante> c = new HashSet<>();
            Statement stm = conn.createStatement();
            ResultSet rs = stm.executeQuery("SELECT * FROM IRepresentante");
            for (;rs.next();) {
                IRepresentante cand = new RepresentanteFactory().createRepresentante();
                cand.setNr(rs.getInt(1));
                cand.setNome(rs.getString(2));
                cand.setDataNasc(parseTools.parseSQLDate(rs.getString(3)));
                cand.setEstadoCivil(rs.getString(4));
                cand.setProfissao(rs.getString(5));
                cand.setLocalidade(rs.getString(6));
                cand.setRua(rs.getString(7));
                cand.setCodPostal(rs.getString(8));
                cand.setNaturalidade(rs.getString(9));
                cand.setNacionalidade(rs.getString(10));
                cand.setEscolaridade(rs.getString(11));
                cand.setTelefone(rs.getString(12));
                cand.setTelemovel(rs.getString(13));
                cand.setRendimentoAgregado(rs.getFloat(14));
                c.add(cand);
            }
            return c;
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}
    } 

    @Override
    public Set<Entry<Integer, IRepresentante>> entrySet() {
        throw new NullPointerException("public Set<Map.Entry<Integer,IRepresentante>> entrySet() not implemented!");
    }   
}
