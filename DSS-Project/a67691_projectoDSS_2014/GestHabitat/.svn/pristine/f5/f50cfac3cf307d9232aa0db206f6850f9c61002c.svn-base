package data_acess;

import business.projetos.IProjeto;
import business.projetos.ProjetoFactory;
import data_acess.ConnectionErrorException;
import java.sql.*;
import java.util.*;
import data_acess.MySQLManager;
import data_acess.MySQLParseTools;

/**
 * Implementação de um Data Acess Object para gerir instancias da classe Projeto.
 * @author Jorge Caldas, José Cortez, Marcelo Gonçalves, Ricardo Silva
 * @version 30.12.2014
 */
public class ProjetoDAO {

    public Connection conn;
    private MySQLParseTools parseTools;


    public ProjetoDAO () throws ConnectionErrorException {
        try {
            this.parseTools = new MySQLParseTools();
            this.conn = (new MySQLManager()).getConnection();
        } catch (SQLException ex) {System.out.println("error_Projeto_bd");}
    }
    
    public int size() {
        try {
            int i = 0;
            Statement stm = conn.createStatement();
            ResultSet rs = stm.executeQuery("SELECT Nr FROM Projetos");
            while(rs.next()){ i++; }
            return i;
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}
    }
    
    public boolean isEmpty() {
        try {
            Statement stm = conn.createStatement();
            ResultSet rs = stm.executeQuery("SELECT Nr FROM Projetos");
            return !rs.next();
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}
    }
    
    public boolean containsKey(Object key) throws NullPointerException {
        try {
            Statement stm = conn.createStatement();
            String sql = "SELECT Nr FROM Projetos WHERE Nr='"+(int)key+"'";
            ResultSet rs = stm.executeQuery(sql);
            return rs.next();
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}
    }
    
    public boolean containsValue(Object value) {
        try {
            if(value instanceof IProjeto) {
                IProjeto v = (IProjeto)value;
                IProjeto isv = this.get(v.getNr());
                if(isv!=null){
                    if(v.equals(isv)) return true;
                }
                return false;
            } else return false;
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}
    }
    
    /* COMO FAÇO PARA OS LISTS? */
    public IProjeto get(Object key) {
        try {
            IProjeto mt = null;
            Statement stm = conn.createStatement();
            String sql = "SELECT * FROM Projetos WHERE Nr='"+(int)key+"'";
            ResultSet rs = stm.executeQuery(sql);
            if (rs.next()){ 
                mt = new ProjetoFactory().createProjeto();
                mt.setNr(rs.getInt(1));
                mt.setOrcamento(rs.getInt(2));
                mt.setCustoFinal(rs.getInt(3));
                mt.setPrestacao(rs.getInt(4));
                mt.setDataInicial(parseTools.parseSQLDate(rs.getString(5)));
                mt.setDataFinal(parseTools.parseSQLDate(rs.getString(6)));
                mt.setObs(rs.getString(7));
                mt.setEstado(rs.getString(8));
                mt.setFuncionarioEnc(rs.getInt(9));
                mt.setFuncionarioReg(rs.getInt(10));
            }
            return mt;
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}
    }
    
    public IProjeto put(Integer key, IProjeto value) {
        try {
            Statement stm = conn.createStatement();
            stm.executeUpdate("DELETE FROM Projetos WHERE Nr='"+key+"'");
            int i  = stm.executeUpdate(insert(key,value));
            IProjeto mt = new ProjetoFactory().createProjeto();
            mt.setNr(value.getNr());
            mt.setOrcamento(value.getOrcamento());
            mt.setCustoFinal(value.getCustoFinal());
            mt.setPrestacao(value.getPrestacao());
            mt.setDataInicial(value.getDataInicial());
            mt.setDataFinal(value.getDataFinal());
            mt.setObs(value.getObs());
            mt.setEstado(value.getEstado());
            mt.setFuncionarioEnc(value.getFuncionarioEnc());
            mt.setFuncionarioReg(value.getFuncionarioReg());
            return mt;
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}
    }

    private String insert(Integer key, IProjeto value){
        String dataI = parseTools.parseCalendar(value.getDataInicial());
        String dataF = parseTools.parseCalendar(value.getDataFinal());
        
        ArrayList<Object> valores = new ArrayList<>();
        valores.add(key);
        valores.add(value.getOrcamento());
        valores.add(value.getCustoFinal());
        valores.add(value.getPrestacao());
        valores.add(dataI);
        valores.add(dataF);
        valores.add(value.getObs());
        valores.add(value.getEstado());
        valores.add(value.getFuncionarioEnc());
        valores.add(value.getFuncionarioReg());
        valores.add("NULL");
        String sql = this.parseTools.createInsert("Projetos", valores);
        return sql;
    }

    public IProjeto remove(Object key) {
        try {
            IProjeto mt = this.get((int)key);
            Statement stm = conn.createStatement();
            stm.executeUpdate("DELETE FROM Projetos WHERE Nr='"+key+"'");
            return mt;
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}
    }
    
    public Collection<IProjeto> values() {
        try {
            Collection<IProjeto> col = new HashSet<>();
            Statement stm = conn.createStatement();
            ResultSet rs = stm.executeQuery("SELECT * FROM Projetos");
            while(rs.next()) {
                IProjeto mt = new ProjetoFactory().createProjeto();
                mt.setNr(rs.getInt(1));
                mt.setOrcamento(rs.getInt(2));
                mt.setCustoFinal(rs.getInt(3));
                mt.setPrestacao(rs.getInt(4));
                mt.setDataInicial(parseTools.parseSQLDate(rs.getString(5)));
                mt.setDataFinal(parseTools.parseSQLDate(rs.getString(6)));
                mt.setObs(rs.getString(7));
                mt.setEstado(rs.getString(8));
                mt.setFuncionarioEnc(rs.getInt(9));
                mt.setFuncionarioReg(rs.getInt(10));
                col.add(mt);
            }
            return col;
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}
    }
    
    public Set<Map.Entry<String,IProjeto>> entrySet() {
        throw new NullPointerException("public Set<Map.Entry<String,Aluno>> entrySet() not implemented!");
    }
    
    public boolean equals(Object o) {
        throw new NullPointerException("public boolean equals(Object o) not implemented!");
    }
    
    public void clear () {
        try {
            Statement stm = conn.createStatement();
            stm.executeUpdate("DELETE FROM Projetos WHERE Projetos.Nr >= 0;");
        }
        catch (Exception e) {throw new NullPointerException(e.getMessage());}
    }
    
    @Override
    public int hashCode() { return this.conn.hashCode(); }
    
    public static void main(String[] args) throws ConnectionErrorException, Exception {
        ProjetoDAO prDAO = new ProjetoDAO();
        prDAO.clear();
        
        List<IProjeto> p = new ArrayList<>();
        
        for(int i=0; i<10; i++){
            IProjeto mt = new ProjetoFactory().createProjeto();
            mt.setNr(i);
            mt.setOrcamento((float)i*100);
            mt.setCustoFinal((float)i*10000);
            mt.setPrestacao((float)i*5);
            mt.setDataInicial(new GregorianCalendar(2012,05,i+2));
            mt.setDataFinal(new GregorianCalendar(2014,05,i+2));
            mt.setObs("Reconstrução da casa");
            mt.setEstado("Concluido");
            mt.setFuncionarioEnc(0);
            mt.setFuncionarioReg(0);
            p.add(mt);
        }
        
        System.out.println(prDAO.isEmpty());

        for(IProjeto v : p){
            prDAO.put(v.getNr(), (IProjeto)v);
            System.out.println("+1 INSERT succeed.");
        }
        
        System.out.println(prDAO.containsKey(4));
        prDAO.remove(p.get(4).getNr());
        System.out.println(prDAO.containsKey(4));
        System.out.println(prDAO.size());

        for(int i=0; i<prDAO.size(); i++){
            if(i!=4) System.out.println("- "+ i +": "+ prDAO.get(i).getNr() + prDAO.get(i).getOrcamento());
        }   
        prDAO.clear();
        System.out.println(prDAO.size());
    } 
}
